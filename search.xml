<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google Kick Start 2018 Round A: Even Digits</title>
    <url>/2019/11/01/Google-Kick-Start-2018-Round-A-Even-Digits/</url>
    <content><![CDATA[<h1 id="Google-Kick-Start-2018-Round-A-Even-Digits"><a href="#Google-Kick-Start-2018-Round-A-Even-Digits" class="headerlink" title="Google Kick Start 2018 Round A: Even Digits"></a>Google Kick Start 2018 Round A: Even Digits</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Supervin has a unique calculator. This calculator only has a display, a plus button, and a minus button. Currently, the integer <strong>N</strong> is displayed on the calculator display.</p>
<p>Pressing the plus button increases the current number displayed on the calculator display by 1. Similarly, pressing the minus button decreases the current number displayed on the calculator display by 1. The calculator does not display any leading zeros. For example, if <code>100</code> is displayed on the calculator display, pressing the minus button once will cause the calculator to display <code>99</code>.</p>
<p>Supervin does not like odd digits, because he thinks they are “odd”. Therefore, he wants to display an integer with only even digits in its decimal representation, using only the calculator buttons. Since the calculator is a bit old and the buttons are hard to press, he wants to use a minimal number of button presses.</p>
<p>Please help Supervin to determine the minimum number of button presses to make the calculator display an integer with no odd digits.</p>
<a id="more"></a>



<p><strong>input:</strong></p>
<p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow. Each begins with one line containing an integer <strong>N</strong>: the integer initially displayed on Supervin’s calculator.</p>
<p><strong>output:</strong></p>
<p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the minimum number of button presses, as described above.</p>
<p><strong>limits:</strong></p>
<p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 20 seconds per test set.<br>Memory limit: 1GB.</p>
<p>Small dataset (Test set 1 - Visible)</p>
<p>1 ≤ <strong>N</strong> ≤ 105.</p>
<p>Large dataset (Test set 2 - Hidden)</p>
<p>1 ≤ <strong>N</strong> ≤ 1016.</p>
<p><strong>sample:</strong></p>
<table>
<thead>
<tr>
<th>Input</th>
<th>Output</th>
</tr>
</thead>
<tbody><tr>
<td>4<br />42<br />11<br />1<br />2018</td>
<td>Case #1: 0 <br />Case #2: 3 <br />Case #3: 1 <br />Case #4: 2</td>
</tr>
</tbody></table>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol>
<li>find 2 numbers, whose all digits are even, closest to <strong>N</strong> on both sides, namely <code>b</code> and <code>s</code>, <code>b</code> is bigger than <strong>N</strong>, <code>s</code> is smaller than <strong>N</strong>. Process as follows:<ol>
<li>find highest odd digit in N, if N = 4389901, then highest odd digit is 3.</li>
<li>highest odd digit minus 1, and set all digits below to 8, then we get <code>s</code>. If N = 4389901, then <code>s</code> = 4288888.</li>
<li>highest odd digit plus 1, and set all digits below to 0, in most cases, we get <code>b</code>. If N = 4389901, then <code>b</code> = 4400000</li>
<li>in 3 I said in most cases, because if highest odd digit is 9, we can’t get <code>b</code> by 3’s method. But fortunately if highest odd digit is 9, <code>b - N &gt; N -s</code>. Means we needn’t condider <code>b</code>.</li>
</ol>
</li>
<li>Print <code>min(b - N, N - s)</code></li>
</ol>
<p>I am not satisfied with this method, because it’s not a universal method like knapsack problem.</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_highest_odd_bit</span><span class="params">(num)</span>:</span></span><br><span class="line">    h_odd_bit = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(num):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">10</span>) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">and</span> count &gt; h_odd_bit:</span><br><span class="line">            h_odd_bit = count</span><br><span class="line">        num = int(num/<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> h_odd_bit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_tail</span><span class="params">(num,bit)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">10</span>**bit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">n_8</span><span class="params">(n)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n):</span><br><span class="line">        result += <span class="number">8</span> * <span class="number">10</span>**(n<span class="number">-1</span>)</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">even_digits</span><span class="params">(num,t)</span>:</span></span><br><span class="line">    highest_odd_bit = find_highest_odd_bit(num)</span><br><span class="line">    <span class="keyword">if</span>(highest_odd_bit == <span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"Case #&#123;&#125;: &#123;&#125;"</span>.format(t,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment">#print(str(num)[-highest_odd_bit])</span></span><br><span class="line">    n_tail1 = num_tail(num,highest_odd_bit - <span class="number">1</span>)</span><br><span class="line">    n_tail2 = n_tail1 + <span class="number">10</span>**(highest_odd_bit - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#n_tail2 = num_tail(num,highest_odd_bit)</span></span><br><span class="line">    top = <span class="number">10</span>**(highest_odd_bit<span class="number">-1</span>)</span><br><span class="line">    bottom = n_8(highest_odd_bit - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(int(str(num)[-highest_odd_bit]) == <span class="number">9</span>):</span><br><span class="line">        print(<span class="string">"Case #&#123;&#125;: &#123;&#125;"</span>.format(t,n_tail2 - bottom))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Case #&#123;&#125;: &#123;&#125;"</span>.format(t,min(top - n_tail1,n_tail2 - bottom)))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    T = int(input())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(T):</span><br><span class="line">        n = int(input())</span><br><span class="line">        even_digits(n,i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Coding</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Google Kick Start</tag>
      </tags>
  </entry>
  <entry>
    <title>What is The Cuckoo Attack</title>
    <url>/2020/06/24/What-is-The-Cuckoo-Attack/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The cuckoo bird replaces other birds’ eggs with its own. The victim birds are tricked into feeding the cuckoo chick as if it were their own.Similarly, in a cuckoo attack, the attacker “replaces” the victim’s <a href="https://en.wikipedia.org/wiki/Trusted_execution_environment" target="_blank" rel="noopener">TEE</a> with his own TEE, leading the victim to treat the attacker’s TEE as his own.<br>test CI/CD</p>
<a id="more"></a>

<p>Specifically, <strong>the attacker try to convinces the victim that a TEE physically controled by the adversary resides in the victim’s own local computer</strong>.</p>
<p>How it can be achieved?</p>
<p>In most TEE’s protocal, attestation for TEE is achieved by special TEE, the special TEE only certifies that the code is running on <em>some</em> genuine TEE processor, but it does not guarantee that where is the processor actually located. Adversary can take advantage of this shortcoming to achieve cuckoo attack.</p>
<p>In the following picture, there is a malware on the victim’s computer, it proxies all messages between user and TEE in his machine. When user want to attestation a TEE on his own computer, the malware intercept this message and forward to TEE on attacker’s machine, and then a special TEE on attacker’s computer generate a proof to prove the TEE on attacker’s machine is an authentic TEE.</p>
<p>As a result, the victim are convinced that the TEE on attacker’s machine resides in his own local computer, and trust it. In this case, Any secrets victim enters can be forwarded to attacker’s TEE, attacker can steal the secrets by some means (such as phycial means).</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg35tanyf3j31wk0u0dk5.jpg" alt="image-20200624101517944"></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li>Parno, Bryan. “Bootstrapping Trust in a” Trusted” Platform.” HotSec. 2008.</li>
</ol>
]]></content>
      <categories>
        <category>Security</category>
        <category>TEE</category>
        <category>Attacks</category>
      </categories>
      <tags>
        <tag>Attacks</tag>
        <tag>TEE</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1114 Print in Order, sample concurrency in Python</title>
    <url>/2019/10/21/leetcode-1114-Print-in-Order-sample-concurrency-in-Python/</url>
    <content><![CDATA[<h1 id="leetcode-1114-Print-in-Order-sample-concurrency-in-Python"><a href="#leetcode-1114-Print-in-Order-sample-concurrency-in-Python" class="headerlink" title="leetcode 1114 Print in Order, sample concurrency in Python"></a>leetcode 1114 Print in Order, sample concurrency in Python</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><blockquote>
<p>Suppose we have a class:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Foo &#123;</span><br><span class="line">  public void first() &#123; print(&quot;first&quot;); &#125;</span><br><span class="line">  public void second() &#123; print(&quot;second&quot;); &#125;</span><br><span class="line">  public void third() &#123; print(&quot;third&quot;); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The same instance of <code>Foo</code> will be passed to three different threads. Thread A will call <code>first()</code>, thread B will call <code>second()</code>, and thread C will call <code>third()</code>. Design a mechanism and modify the program to ensure that <code>second()</code> is executed after <code>first()</code>, and <code>third()</code> is executed after <code>second()</code>.</p>
</blockquote>
<a id="more"></a>

<p>Print in order is a simple concurrency programming problem, especially in Python. But it’s my first concurrency program in Python, so record in here.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I simply use <strong>two locks</strong> to achieve synchoronization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    lock1 = threading.Lock()</span><br><span class="line">    lock2 = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lock1.acquire()</span><br><span class="line">        self.lock2.acquire()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first</span><span class="params">(self, printFirst: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># printFirst() outputs "first". Do not change or remove this line.</span></span><br><span class="line">        printFirst()</span><br><span class="line">        self.lock1.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">second</span><span class="params">(self, printSecond: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.lock1.acquire()</span><br><span class="line">        <span class="comment"># printSecond() outputs "second". Do not change or remove this line.</span></span><br><span class="line">        printSecond()</span><br><span class="line">        self.lock1.release()</span><br><span class="line">        self.lock2.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">third</span><span class="params">(self, printThird: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.lock2.acquire()</span><br><span class="line">        <span class="comment"># printThird() outputs "third". Do not change or remove this line.</span></span><br><span class="line">        printThird()</span><br><span class="line">        self.lock2.release()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Coding</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>concurrency</tag>
        <tag>multithreading</tag>
      </tags>
  </entry>
  <entry>
    <title>Producer-consumer problem solution in C</title>
    <url>/2019/10/21/Producer-consumer-problem-solution-in-C/</url>
    <content><![CDATA[<h1 id="Producer-consumer-problem-multiprocessing-solution-in-C-with-details"><a href="#Producer-consumer-problem-multiprocessing-solution-in-C-with-details" class="headerlink" title="Producer-consumer problem multiprocessing solution in C with details"></a>Producer-consumer problem multiprocessing solution in C with details</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="[https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem](https://en.wikipedia.org/wiki/Producer–consumer_problem)"><strong>Producer-consumer problem</strong></a> is a classical problem in concurrency programming, I want to solve it by multiprocessing method. Multiprocessing method need more knowledges than multithreading method, because different process need to communicate with each other. </p>
<p>Process can communicate with each other by <strong>IPC</strong> (<a href="https://en.wikipedia.org/wiki/Inter-process_communication" target="_blank" rel="noopener"><em>Inter-Process Communication</em></a>), I chose a type of IPC , <strong>share memory</strong>, to implement.</p>
<a id="more"></a>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>The key to solve the producer-consumer problem is synchronization, there is another point that seems easy to solve, that is comsumer comsume producer’s products. In multiprocessing case, comsumer process have to communicate with producer process to know where product is. So, 2 keys to solve the problem:</p>
<ul>
<li>Synchronization </li>
<li>Communication</li>
</ul>
<p>In C language, header file <a href="https://pubs.opengroup.org/onlinepubs/7908799/xsh/syssem.h.html" target="_blank" rel="noopener">*&lt;sys/sem.h&gt;*</a> helps us solve the first one, header file <a href="https://pubs.opengroup.org/onlinepubs/009695399/basedefs/sys/shm.h.html" target="_blank" rel="noopener">*&lt;sys/shm.h&gt;*</a> help us solve the second one.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>I defined two types in <code>my_type.h</code>:</p>
<ol>
<li><code>product</code>: simulate produced products.</li>
<li><code>shm_manage</code>: used to shared memory, indicate used memory range in shared memory.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my_type.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_TYPE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_TYPE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125; product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">&#125; shm_manage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>I wrapped 4 method of semaphore operation:</p>
<ol>
<li><code>set_sem_value</code>: set semaphore <code>sem_id</code>‘s <code>sem_num</code> to <code>value</code></li>
<li><code>del_sem_value</code>: delete semaphore <code>sem_id</code></li>
<li><code>sem_p</code>: minus 1 from semaphore <code>sem_id</code>‘s <code>sem_num</code></li>
<li><code>sem_v</code>: add 1 to semaphore <code>sem_id</code>‘s <code>sem_num</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my_sem_ops.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_SEM_OPS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_SEM_OPS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">set_sem_value</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// init semaphore</span></span><br><span class="line">    <span class="keyword">union</span> semun sem_union;</span><br><span class="line">    sem_union.val = value;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id,sem_num,SETVAL,sem_union) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"init semaphore error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">del_sem_value</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// delete semaphore</span></span><br><span class="line">    <span class="keyword">union</span> semun sem_union;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id,<span class="number">0</span>,IPC_RMID,sem_union) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"delete semaphore error:"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sem_p</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">    sem_b.sem_num = sem_num;</span><br><span class="line">    sem_b.sem_op = <span class="number">-1</span>;<span class="comment">//P()</span></span><br><span class="line">    sem_b.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sem_b,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"p() error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sem_v</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">    sem_b.sem_num = sem_num;</span><br><span class="line">    sem_b.sem_op = <span class="number">1</span>;<span class="comment">//V()</span></span><br><span class="line">    sem_b.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sem_b,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"p() error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>In producer:</p>
<ul>
<li>ftok() use a file to get a IPC id, I used file ‘.’, that means producers and consumers must run in same directory, or they will have differ IPC id.</li>
<li><code>semopts.buf-&gt;sem_otime == 0</code> to determine whether it’s first producer, first producer have to initiate three semaphores.<ul>
<li>only <code>union semun semopts;</code> is not enough, will cause <code>semctl()</code>‘s error: bad address.</li>
<li>Need <code>struct semid_ds mysemds;semopts.buf = &amp;mysemds;</code></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// producer.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_sem_ops.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_type.h"</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORAGE_ROOM 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE sizeof(product) * STORAGE_ROOM + sizeof(shm_manage)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sem_id; <span class="comment">// semaphore's id</span></span><br><span class="line"><span class="keyword">int</span> shm_id; <span class="comment">// share memory's id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun semopts;</span><br><span class="line"></span><br><span class="line">shm_manage *shm_m; <span class="comment">// data structure that used to manage shared memory</span></span><br><span class="line">product *product_start_addr; <span class="comment">// start address in share memory used to store product's info</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_handler</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123; <span class="comment">// handle interrupt</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Caught signal %d\n"</span>,signo);</span><br><span class="line">    <span class="keyword">if</span> (shmctl(shm_id, IPC_RMID, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"shmctl(IPC_RMID) failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    del_sem_value(sem_id);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// producer to produce products</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">produce</span><span class="params">(<span class="keyword">int</span> product_number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    product p;</span><br><span class="line">    <span class="built_in">strncpy</span>(p.name,<span class="string">"beer"</span>,<span class="keyword">sizeof</span>(<span class="string">"beer"</span>));</span><br><span class="line">    p.id = product_number;</span><br><span class="line">    </span><br><span class="line">    shm_m-&gt;end = (shm_m-&gt;end + <span class="number">1</span>) % STORAGE_ROOM;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strncpy</span>((product_start_addr + shm_m-&gt;end)-&gt;name,p.name,<span class="built_in">strlen</span>(p.name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"producing: product's id is %d, product's name is %s\n"</span>,(product_start_addr + shm_m-&gt;end)-&gt;id ,(product_start_addr + shm_m-&gt;end)-&gt;name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// set signal handler</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigIntHandler</span>;</span></span><br><span class="line">    sigIntHandler.sa_handler = sig_handler;</span><br><span class="line">    sigemptyset(&amp;sigIntHandler.sa_mask);</span><br><span class="line">    sigIntHandler.sa_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate key</span></span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    key = ftok(<span class="string">"."</span>,<span class="number">0x01</span>);</span><br><span class="line">    <span class="keyword">if</span>(key &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key = %d\n"</span>,key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate shm_id</span></span><br><span class="line">    shm_id = shmget(key,BUFFER_SIZE,IPC_CREAT | <span class="number">0600</span>);</span><br><span class="line">    <span class="keyword">if</span>(shm_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"shmget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shm_id = %d\n"</span>,shm_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate sem_id</span></span><br><span class="line">    <span class="comment">// 3 semaphores</span></span><br><span class="line">    <span class="comment">// 0 - Remaining room</span></span><br><span class="line">    <span class="comment">// 1 - produced product number</span></span><br><span class="line">    <span class="comment">// 2 - mutex lock</span></span><br><span class="line">    sem_id = semget(key,<span class="number">3</span>,IPC_CREAT | <span class="number">0600</span>); <span class="comment">// get semaphore</span></span><br><span class="line">    <span class="keyword">if</span>(sem_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sem_id = %d\n"</span>,sem_id);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">mysemds</span>;</span></span><br><span class="line">    semopts.buf = &amp;mysemds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id,<span class="number">1</span>,IPC_STAT,semopts) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semctl error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semopts.buf-&gt;sem_otime == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I am the first producer\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>( set_sem_value(sem_id,<span class="number">0</span>,STORAGE_ROOM) &lt; <span class="number">0</span>) <span class="comment">// set semaphore sem_id's first semaphore's initia value to STORAGE</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to initialize semaphore\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( set_sem_value(sem_id,<span class="number">1</span>,<span class="number">0</span>) &lt; <span class="number">0</span>) <span class="comment">//sem_id's second semaphore</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to initialize semaphore\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( set_sem_value(sem_id,<span class="number">2</span>,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to initialize semaphore\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map at </span></span><br><span class="line">    shm_m = (shm_manage*)shmat(shm_id,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    product_start_addr = (product *)(shm_m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// producing</span></span><br><span class="line">    <span class="keyword">int</span> product_number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// critical area</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        produce(product_number++);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sigaction(SIGINT,&amp;sigIntHandler,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    shmdt(shm_m);</span><br><span class="line">    del_sem_value(sem_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// consumer.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_sem_ops.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_type.h"</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORAGE_ROOM 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE sizeof(product) * STORAGE_ROOM + sizeof(shm_manage)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sem_id; <span class="comment">// semaphore's id</span></span><br><span class="line"><span class="keyword">int</span> shm_id; <span class="comment">// share memory's id</span></span><br><span class="line"></span><br><span class="line">shm_manage *shm_m; <span class="comment">// data structure that used to manage shared memory</span></span><br><span class="line">product *product_start_addr; <span class="comment">// start address in share memory used to store product's info</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_handler</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123; <span class="comment">// handle interrupt</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Caught signal %d\n"</span>,signo);</span><br><span class="line">    <span class="comment">// shmdt(p_map);</span></span><br><span class="line">    <span class="comment">//del_sem_value(sem_id);</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shm_m-&gt;start = (shm_m-&gt;start + <span class="number">1</span>) % STORAGE_ROOM;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"consuming: product's is %d, product's name is %s\n"</span>,(product_start_addr + shm_m-&gt;start)-&gt;id,(product_start_addr + shm_m-&gt;start)-&gt;name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// set signal handler</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigIntHandler</span>;</span></span><br><span class="line">    sigIntHandler.sa_handler = sig_handler;</span><br><span class="line">    sigemptyset(&amp;sigIntHandler.sa_mask);</span><br><span class="line">    sigIntHandler.sa_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate key</span></span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    key = ftok(<span class="string">"."</span>,<span class="number">0x01</span>);</span><br><span class="line">    <span class="keyword">if</span>(key &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key = %d\n"</span>,key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate shm_id</span></span><br><span class="line">    shm_id = shmget(key,BUFFER_SIZE,<span class="number">0600</span>);</span><br><span class="line">    <span class="keyword">if</span>(shm_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"shmget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shm_id = %d\n"</span>,shm_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate sem_id</span></span><br><span class="line">    <span class="comment">// 3 semaphores</span></span><br><span class="line">    <span class="comment">// 0 - Remaining room</span></span><br><span class="line">    <span class="comment">// 1 - produced product number</span></span><br><span class="line">    <span class="comment">// 2 - mutex lock</span></span><br><span class="line">    sem_id = semget(key,<span class="number">3</span>,<span class="number">0600</span>); <span class="comment">// get semaphore</span></span><br><span class="line">    <span class="keyword">if</span>(sem_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sem_id = %d\n"</span>,sem_id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map at </span></span><br><span class="line">    shm_m = (shm_manage*)shmat(shm_id,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    product_start_addr = (product *)(shm_m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// producing</span></span><br><span class="line">    <span class="keyword">int</span> product_number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// critical area</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//produce(product_number++);</span></span><br><span class="line">        consume();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sigaction(SIGINT,&amp;sigIntHandler,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    shmdt(shm_m);</span><br><span class="line">    del_sem_value(sem_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Coding</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
        <tag>multithreading</tag>
        <tag>Producer-consumer problem</tag>
        <tag>multiprocessing</tag>
        <tag>C</tag>
      </tags>
  </entry>
</search>
