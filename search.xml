<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Producer-consumer problem solution in C</title>
    <url>/2019/10/21/Producer-consumer-problem-solution-in-C/</url>
    <content><![CDATA[<h1 id="Producer-consumer-problem-multiprocessing-solution-in-C-with-details"><a href="#Producer-consumer-problem-multiprocessing-solution-in-C-with-details" class="headerlink" title="Producer-consumer problem multiprocessing solution in C with details"></a>Producer-consumer problem multiprocessing solution in C with details</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="[https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem](https://en.wikipedia.org/wiki/Producer–consumer_problem)"><strong>Producer-consumer problem</strong></a> is a classical problem in concurrency programming, I want to solve it by multiprocessing method. Multiprocessing method need more knowledges than multithreading method, because different process need to communicate with each other. </p>
<p>Process can communicate with each other by <strong>IPC</strong> (<a href="https://en.wikipedia.org/wiki/Inter-process_communication" target="_blank" rel="noopener"><em>Inter-Process Communication</em></a>), I chose a type of IPC , <strong>share memory</strong>, to implement.</p>
<a id="more"></a>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>The key to solve the producer-consumer problem is synchronization, there is another point that seems easy to solve, that is comsumer comsume producer’s products. In multiprocessing case, comsumer process have to communicate with producer process to know where product is. So, 2 keys to solve the problem:</p>
<ul>
<li>Synchronization </li>
<li>Communication</li>
</ul>
<p>In C language, header file <a href="https://pubs.opengroup.org/onlinepubs/7908799/xsh/syssem.h.html" target="_blank" rel="noopener">*&lt;sys/sem.h&gt;*</a> helps us solve the first one, header file <a href="https://pubs.opengroup.org/onlinepubs/009695399/basedefs/sys/shm.h.html" target="_blank" rel="noopener">*&lt;sys/shm.h&gt;*</a> help us solve the second one.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>I defined two types in <code>my_type.h</code>:</p>
<ol>
<li><code>product</code>: simulate produced products.</li>
<li><code>shm_manage</code>: used to shared memory, indicate used memory range in shared memory.</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my_type.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_TYPE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_TYPE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125; product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">&#125; shm_manage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>I wrapped 4 method of semaphore operation:</p>
<ol>
<li><code>set_sem_value</code>: set semaphore <code>sem_id</code>‘s <code>sem_num</code> to <code>value</code></li>
<li><code>del_sem_value</code>: delete semaphore <code>sem_id</code></li>
<li><code>sem_p</code>: minus 1 from semaphore <code>sem_id</code>‘s <code>sem_num</code></li>
<li><code>sem_v</code>: add 1 to semaphore <code>sem_id</code>‘s <code>sem_num</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my_sem_ops.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_SEM_OPS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_SEM_OPS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">set_sem_value</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// init semaphore</span></span><br><span class="line">    <span class="keyword">union</span> semun sem_union;</span><br><span class="line">    sem_union.val = value;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id,sem_num,SETVAL,sem_union) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"init semaphore error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">del_sem_value</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// delete semaphore</span></span><br><span class="line">    <span class="keyword">union</span> semun sem_union;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id,<span class="number">0</span>,IPC_RMID,sem_union) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"delete semaphore error:"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sem_p</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> sem_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">    sem_b.sem_num = sem_num;</span><br><span class="line">    sem_b.sem_op = <span class="number">-1</span>;<span class="comment">//P()</span></span><br><span class="line">    sem_b.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sem_b,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"p() error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sem_v</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">    sem_b.sem_num = sem_num;</span><br><span class="line">    sem_b.sem_op = <span class="number">1</span>;<span class="comment">//V()</span></span><br><span class="line">    sem_b.sem_flg = SEM_UNDO;</span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sem_b,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"p() error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>In producer:</p>
<ul>
<li>ftok() use a file to get a IPC id, I used file ‘.’, that means producers and consumers must run in same directory, or they will have differ IPC id.</li>
<li><code>semopts.buf-&gt;sem_otime == 0</code> to determine whether it’s first producer, first producer have to initiate three semaphores.<ul>
<li>only <code>union semun semopts;</code> is not enough, will cause <code>semctl()</code>‘s error: bad address.</li>
<li>Need <code>struct semid_ds mysemds;semopts.buf = &amp;mysemds;</code></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// producer.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_sem_ops.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_type.h"</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORAGE_ROOM 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE sizeof(product) * STORAGE_ROOM + sizeof(shm_manage)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sem_id; <span class="comment">// semaphore's id</span></span><br><span class="line"><span class="keyword">int</span> shm_id; <span class="comment">// share memory's id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> semun semopts;</span><br><span class="line"></span><br><span class="line">shm_manage *shm_m; <span class="comment">// data structure that used to manage shared memory</span></span><br><span class="line">product *product_start_addr; <span class="comment">// start address in share memory used to store product's info</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_handler</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123; <span class="comment">// handle interrupt</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Caught signal %d\n"</span>,signo);</span><br><span class="line">    <span class="keyword">if</span> (shmctl(shm_id, IPC_RMID, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"shmctl(IPC_RMID) failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    del_sem_value(sem_id);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// producer to produce products</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">produce</span><span class="params">(<span class="keyword">int</span> product_number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    product p;</span><br><span class="line">    <span class="built_in">strncpy</span>(p.name,<span class="string">"beer"</span>,<span class="keyword">sizeof</span>(<span class="string">"beer"</span>));</span><br><span class="line">    p.id = product_number;</span><br><span class="line">    </span><br><span class="line">    shm_m-&gt;end = (shm_m-&gt;end + <span class="number">1</span>) % STORAGE_ROOM;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strncpy</span>((product_start_addr + shm_m-&gt;end)-&gt;name,p.name,<span class="built_in">strlen</span>(p.name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"producing: product's id is %d, product's name is %s\n"</span>,(product_start_addr + shm_m-&gt;end)-&gt;id ,(product_start_addr + shm_m-&gt;end)-&gt;name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// set signal handler</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigIntHandler</span>;</span></span><br><span class="line">    sigIntHandler.sa_handler = sig_handler;</span><br><span class="line">    sigemptyset(&amp;sigIntHandler.sa_mask);</span><br><span class="line">    sigIntHandler.sa_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate key</span></span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    key = ftok(<span class="string">"."</span>,<span class="number">0x01</span>);</span><br><span class="line">    <span class="keyword">if</span>(key &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key = %d\n"</span>,key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate shm_id</span></span><br><span class="line">    shm_id = shmget(key,BUFFER_SIZE,IPC_CREAT | <span class="number">0600</span>);</span><br><span class="line">    <span class="keyword">if</span>(shm_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"shmget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shm_id = %d\n"</span>,shm_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate sem_id</span></span><br><span class="line">    <span class="comment">// 3 semaphores</span></span><br><span class="line">    <span class="comment">// 0 - Remaining room</span></span><br><span class="line">    <span class="comment">// 1 - produced product number</span></span><br><span class="line">    <span class="comment">// 2 - mutex lock</span></span><br><span class="line">    sem_id = semget(key,<span class="number">3</span>,IPC_CREAT | <span class="number">0600</span>); <span class="comment">// get semaphore</span></span><br><span class="line">    <span class="keyword">if</span>(sem_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sem_id = %d\n"</span>,sem_id);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">mysemds</span>;</span></span><br><span class="line">    semopts.buf = &amp;mysemds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id,<span class="number">1</span>,IPC_STAT,semopts) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semctl error!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semopts.buf-&gt;sem_otime == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I am the first producer\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>( set_sem_value(sem_id,<span class="number">0</span>,STORAGE_ROOM) &lt; <span class="number">0</span>) <span class="comment">// set semaphore sem_id's first semaphore's initia value to STORAGE</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to initialize semaphore\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( set_sem_value(sem_id,<span class="number">1</span>,<span class="number">0</span>) &lt; <span class="number">0</span>) <span class="comment">//sem_id's second semaphore</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to initialize semaphore\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( set_sem_value(sem_id,<span class="number">2</span>,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Failed to initialize semaphore\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map at </span></span><br><span class="line">    shm_m = (shm_manage*)shmat(shm_id,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    product_start_addr = (product *)(shm_m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// producing</span></span><br><span class="line">    <span class="keyword">int</span> product_number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// critical area</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        produce(product_number++);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sigaction(SIGINT,&amp;sigIntHandler,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    shmdt(shm_m);</span><br><span class="line">    del_sem_value(sem_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// consumer.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_sem_ops.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_type.h"</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STORAGE_ROOM 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE sizeof(product) * STORAGE_ROOM + sizeof(shm_manage)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sem_id; <span class="comment">// semaphore's id</span></span><br><span class="line"><span class="keyword">int</span> shm_id; <span class="comment">// share memory's id</span></span><br><span class="line"></span><br><span class="line">shm_manage *shm_m; <span class="comment">// data structure that used to manage shared memory</span></span><br><span class="line">product *product_start_addr; <span class="comment">// start address in share memory used to store product's info</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_handler</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123; <span class="comment">// handle interrupt</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Caught signal %d\n"</span>,signo);</span><br><span class="line">    <span class="comment">// shmdt(p_map);</span></span><br><span class="line">    <span class="comment">//del_sem_value(sem_id);</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shm_m-&gt;start = (shm_m-&gt;start + <span class="number">1</span>) % STORAGE_ROOM;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"consuming: product's is %d, product's name is %s\n"</span>,(product_start_addr + shm_m-&gt;start)-&gt;id,(product_start_addr + shm_m-&gt;start)-&gt;name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// set signal handler</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigIntHandler</span>;</span></span><br><span class="line">    sigIntHandler.sa_handler = sig_handler;</span><br><span class="line">    sigemptyset(&amp;sigIntHandler.sa_mask);</span><br><span class="line">    sigIntHandler.sa_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate key</span></span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    key = ftok(<span class="string">"."</span>,<span class="number">0x01</span>);</span><br><span class="line">    <span class="keyword">if</span>(key &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"key = %d\n"</span>,key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate shm_id</span></span><br><span class="line">    shm_id = shmget(key,BUFFER_SIZE,<span class="number">0600</span>);</span><br><span class="line">    <span class="keyword">if</span>(shm_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"shmget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shm_id = %d\n"</span>,shm_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate sem_id</span></span><br><span class="line">    <span class="comment">// 3 semaphores</span></span><br><span class="line">    <span class="comment">// 0 - Remaining room</span></span><br><span class="line">    <span class="comment">// 1 - produced product number</span></span><br><span class="line">    <span class="comment">// 2 - mutex lock</span></span><br><span class="line">    sem_id = semget(key,<span class="number">3</span>,<span class="number">0600</span>); <span class="comment">// get semaphore</span></span><br><span class="line">    <span class="keyword">if</span>(sem_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sem_id = %d\n"</span>,sem_id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map at </span></span><br><span class="line">    shm_m = (shm_manage*)shmat(shm_id,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    product_start_addr = (product *)(shm_m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// producing</span></span><br><span class="line">    <span class="keyword">int</span> product_number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_p(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_p error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// critical area</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//produce(product_number++);</span></span><br><span class="line">        consume();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// -------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">2</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sem_v(sem_id,<span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sem_v error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sigaction(SIGINT,&amp;sigIntHandler,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    shmdt(shm_m);</span><br><span class="line">    del_sem_value(sem_id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Coding</category>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
        <tag>multithreading</tag>
        <tag>Producer-consumer problem</tag>
        <tag>multiprocessing</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1114 Print in Order, sample concurrency in Python</title>
    <url>/2019/10/21/leetcode-1114-Print-in-Order-sample-concurrency-in-Python/</url>
    <content><![CDATA[<h1 id="leetcode-1114-Print-in-Order-sample-concurrency-in-Python"><a href="#leetcode-1114-Print-in-Order-sample-concurrency-in-Python" class="headerlink" title="leetcode 1114 Print in Order, sample concurrency in Python"></a>leetcode 1114 Print in Order, sample concurrency in Python</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><blockquote>
<p>Suppose we have a class:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Foo &#123;</span><br><span class="line">  public void first() &#123; print(&quot;first&quot;); &#125;</span><br><span class="line">  public void second() &#123; print(&quot;second&quot;); &#125;</span><br><span class="line">  public void third() &#123; print(&quot;third&quot;); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The same instance of <code>Foo</code> will be passed to three different threads. Thread A will call <code>first()</code>, thread B will call <code>second()</code>, and thread C will call <code>third()</code>. Design a mechanism and modify the program to ensure that <code>second()</code> is executed after <code>first()</code>, and <code>third()</code> is executed after <code>second()</code>.</p>
</blockquote>
<a id="more"></a>

<p>Print in order is a simple concurrency programming problem, especially in Python. But it’s my first concurrency program in Python, so record in here.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I simply use <strong>two locks</strong> to achieve synchoronization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    lock1 = threading.Lock()</span><br><span class="line">    lock2 = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.lock1.acquire()</span><br><span class="line">        self.lock2.acquire()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first</span><span class="params">(self, printFirst: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># printFirst() outputs "first". Do not change or remove this line.</span></span><br><span class="line">        printFirst()</span><br><span class="line">        self.lock1.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">second</span><span class="params">(self, printSecond: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.lock1.acquire()</span><br><span class="line">        <span class="comment"># printSecond() outputs "second". Do not change or remove this line.</span></span><br><span class="line">        printSecond()</span><br><span class="line">        self.lock1.release()</span><br><span class="line">        self.lock2.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">third</span><span class="params">(self, printThird: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.lock2.acquire()</span><br><span class="line">        <span class="comment"># printThird() outputs "third". Do not change or remove this line.</span></span><br><span class="line">        printThird()</span><br><span class="line">        self.lock2.release()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Coding</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>concurrency</tag>
        <tag>Python</tag>
        <tag>multithreading</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2019/10/20/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>professional learning</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
